package DB;
import java.sql.*;
import java.util.Scanner;

import DB.Tables.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;



public class Driver {

	private static Driver self = null;
	private File dbDescriptor = null;
	private Connection connect = null;

	public static final String TAG_DATABASE = "database";
	public static final String TAG_TABLE = "table";
	public static final String TAG_CREATE_SUPER_USER = "creat_user";
	public static final String TAG_GRANT_SUPER_USER = "grant_user";

	private static final String DB_URL = "jdbc:mysql://localhost:3306/";
	private static final String DATABASE_NAME = "simoorgh-managment-system";
	private static final String USER_NAME = "root";
	private static final String PASSWORD = "";
	private static final String COMMA_SEP = " ,\n ";

	public static final String SQL_CREATE_DATABASE = "CREATE DATABASE "
			+ DATABASE_NAME + ";";

	public static final String SQL_CHANGE_DATABASE_CHARSET = "ALTER DATABASE "
			+ DATABASE_NAME + " CHARACTER SET utf8 COLLATE utf8_general_ci;";

	public static final String SQL_CHANGE_TABLE_CAHRSET = "ALTER TABLE %s CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;";

	public static final String SQL_CREATE_USER = "CREATE USER " + USER_NAME
			+ " IDENTIFIED BY '" + PASSWORD + "';";

	public static final String SQL_GRANT_USER = "GRANT USAGE ON *.* TO "
			+ USER_NAME + "@localhost IDENTIFIED BY '" + PASSWORD + "';"
			+ "GRANT ALL PRIVILEGES ON " + DATABASE_NAME + ".* TO " + USER_NAME
			+ "@localhost;";
	
	public static final String SQL_HUMANRESOURCE_TABLE = "CREATE TABLE "
			+ HumanResource.TABLE_NAME 
			+ "("
			+ HumanResource._ID + " INTEGER PRIMARY KEY AUTO_INCREMENT" + COMMA_SEP
			+ HumanResource.COLUMN_NAME_FIRSTNAME + "VARCHAR(45)"+ COMMA_SEP
			+ HumanResource.COLUMN_NAME_LASTNAME + "VARCHAR(45)"+ COMMA_SEP
			+ HumanResource.COLUMN_NAME_MELINUM + " INT UNIQUE"+ COMMA_SEP
			+ HumanResource.COLUMN_NAME_EMPLOYEEID + "INT UNIQUE"+ COMMA_SEP
		    + HumanResource.COLUMN_NAME_STARTDATE + "DATE"+ COMMA_SEP
		    + HumanResource.COLUMN_NAME_LEVEL + "VARCHAR(45)"+ COMMA_SEP
		    + HumanResource.COLUMN_NAME_DEPARTMENT + "VARCHAR(45)"+ COMMA_SEP
		    + ")";

	public static Driver getInstance() {
		if (self == null) {
			return new Driver();
		}

		return self;
	}
	public Driver(){
		//		dbDescriptor = new File("db-config.txt");
		//		try {
		//			if (!dbDescriptor.exists()) {
		//				dbDescriptor.createNewFile();
		//			}
		//
		//		} catch (IOException e) {
		//			// TODO Auto-generated catch block
		//			e.printStackTrace();
		//		}

		try {
			// This will load the MySQL driver, each DB has its own driver
			Class.forName("com.mysql.jdbc.Driver");

			// Setup the connection with the DB
			connect = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Create Database

		System.out.println("Create DataBase: " + DATABASE_NAME);
		System.out.println(SQL_CREATE_DATABASE);
		if (exeSQL(SQL_CREATE_DATABASE)) {
			exeSQL(SQL_CHANGE_DATABASE_CHARSET);
			
		}
//
//		open();
		System.out.println("open");
//		createOrUpdateTables();
		System.out.println("tables create");
	}

	private boolean exeSQL(String syntax) {
		try {
			PreparedStatement preparedStatement = connect
					.prepareStatement(syntax);
			preparedStatement.executeUpdate();
			return true;

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	private void open() {
		try {
			// Setup the connection with the DB
			connect = DriverManager.getConnection(DB_URL + DATABASE_NAME
					+ "?useUnicode=true&characterEncoding=UTF-8", USER_NAME,
					PASSWORD);
			// + "?useUnicode=true&characterEncoding=utf-8"

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void createOrUpdateTables() {
		addTable(HumanResource.TABLE_NAME, SQL_HUMANRESOURCE_TABLE );
//		addTable(KnowledgeAttahcmentEntry.TABLE_NAME,
//				SQL_KNOWLEDGE_ATTACHMENT_TABLE);
//		addTable(CategoryEntry.TABLE_NAME, SQL_CATEGORIES_TABLE);
//		addTable(KnowledgeCategoryEntry.TABLE_NAME,
//				SQL_KNOWLEDGE_CATEGORIES_TABLE);
//		addTable(RelationshipEntry.TABLE_NAME, SQL_RELATIONSHIP_TABLE);
//		addTable(KnowledgeRelationshipEntry.TABLE_NAME,
//				SQL_KNOWLEDGE_RELATIONSHIPS_TABLE);
//		addTable(KnowledgeVersionEntry.TABLE_NAME, SQL_KNOWLEDGE_VERSION_TABLE);
//		addTable(UserEntry.TABLE_NAME, SQL_USER_TABLE);
//		addTable(DefaultAccessRightEntry.TABLE_NAME, SQL_DEFAULT_ACCESS_TABLE);
//		addTable(AccessRightEntry.TABLE_NAME, SQL_ACCESS_TABLE);
//		addTable(CommentEntry.TABLE_NAME, SQL_COMMENT_TABLE);
//		addTable(Vote.TABLE_NAME, SQL_VOTE_TABLE);
//		addTable(SkillEntry.TABLE_NAME, SQL_SKILL_TABLE);
//		addTable(SkillUserEntry.TABLE_NAME, SQL_SKILL_USER_TABLE);
//		addTable(SkillCnfEntry.TABLE_NAME, SQL_SKILL_USER_CONF_TABLE);
//		addTable(KnowledgeViolationEntry.TABLE_NAME, SQL_VIOLATION_TABLE);
	}

	private void addTable(String tableName, String syntax) {
		if (!contains(TAG_TABLE, tableName)) {
			System.out.println("Create Table: " + tableName);
			System.out.println(syntax);
			if (exeSQL(syntax)) {
				exeSQL(String.format(SQL_CHANGE_TABLE_CAHRSET, tableName));
				add(TAG_TABLE, tableName);
			}
		}
	}
	public void add(String tag, String value) {
		try {
			PrintWriter out = new PrintWriter(new BufferedWriter(
					new FileWriter(dbDescriptor.getAbsoluteFile(), true)));
			out.println(tag + ": " + value);
			out.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public boolean contains(String tag) {
		return find(tag);
	}

	public boolean contains(String tag, String value) {
		return find(tag + ": " + value);
	}

	private boolean find(String query) {
		try {
			Scanner scanner = new Scanner(dbDescriptor);

			// now read the file line by line...
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				if (line.contains(query)) {
					return true;
				}
			}

			scanner.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		return false;
	}
	
	public void close() {
		try {
			if (connect != null)
				connect.close();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
	}
}


